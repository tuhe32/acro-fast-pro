<template>
  <a-card :body-style="{ padding: '24px 32px' }" :bordered="false">
    <a-form :model="formState" @finish="handleSubmit">
      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.username" label="用户名" hasFeedback name="username">
        <a-input placeholder="用户名" v-model:value="formState.username"></a-input>
      </a-form-item>

      <a-form-item v-if="!isEdit" :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.password" label="密码" hasFeedback name="password">
        <a-input placeholder="密码" v-model:value="formState.password"></a-input>
      </a-form-item>

      <a-form-item v-if="!isEdit" :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.confirmpsd" label="确认密码" hasFeedback name="confirmpsd">
        <a-input placeholder="确认密码" v-model:value="formState.confirmpsd"></a-input>
      </a-form-item>

      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.name" label="姓名" hasFeedback name="name">
        <a-input placeholder="姓名" v-model:value="formState.name"></a-input>
      </a-form-item>

      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.phone" label="手机号" hasFeedback name="phone">
        <a-input placeholder="手机号" v-model:value="formState.phone"></a-input>
      </a-form-item>

      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.isEnable" label="是否启用" hasFeedback name="isEnable">
        <a-select v-model:value="formState.isEnable">
          <a-select-option :value="1">启用</a-select-option>
          <a-select-option :value="0">禁用</a-select-option>
        </a-select>
      </a-form-item>

      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.roleIds" label="角色" hasFeedback name="roleIds">
        <a-select mode="multiple" v-model:value="formState.roleIds">
          <a-select-option v-for="item in roles" :key="item.id" :value="item.id">{{ item.name }}</a-select-option>
        </a-select>
      </a-form-item>

      <!-- <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" label="商圈">
        <mall-tree-select :changeOnStatus="true" v-decorator="['mallId', {initialValue:null}]" />
      </a-form-item> -->

      <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" v-bind="validateInfos.remark" label="描述" hasFeedback extra="请填写一段描述">
        <a-textarea :rows="5" placeholder="..." v-model:value="formState.remark" />
      </a-form-item>

      <a-form-item v-bind="buttonCol">
        <a-row>
          <a-col span="6">
            <a-button type="primary" html-type="submit" v-action:auth:adminUser:saveUser>提交</a-button>
          </a-col>
          <a-col span="10">
            <a-button @click="handleGoBack">返回</a-button>
          </a-col>
          <a-col span="8"></a-col>
        </a-row>
      </a-form-item>
    </a-form>
  </a-card>
</template>

<script lang="ts" setup>
  import { saveWebUser, getWebUserDetail } from '../../api/auth/auth';
  import { getAllRole } from '../../api/auth/role';
  import { onMounted, nextTick, reactive, ref, Ref, UnwrapRef, inject } from 'vue';
  import { validateConfirm, require, pattern, number, arrayRequire } from '../../utils/rules';
  // import MallTreeSelect from '../shop/modules/MallTreeSelect'
  import { Form } from 'ant-design-vue';
  import { useRoute } from 'vue-router';
  import { pick } from 'lodash-es';
  import { validResp } from '@/utils/util';
  import { AdminUser } from '@/api/auth/model/UserModel';
  import { RuleObject } from 'ant-design-vue/lib/form/interface';
  import { MultiTabApi } from '@/components/MultiTab/index';
  import { MessageApi } from 'ant-design-vue/lib/message';

  const useForm = Form.useForm;
  const { query } = useRoute();
  const $multiTab = inject<MultiTabApi>('$multiTab') as MultiTabApi;
  const $message = inject<MessageApi>('$message') as MessageApi;
  const formState: UnwrapRef<AdminUser> = reactive({
    username: '',
    password: undefined,
    confirmpsd: undefined,
    name: '',
    phone: undefined,
    isEnable: 1,
    roleIds: undefined,
    remark: '',
    mallId: undefined,
  });
  var validateConfirmPassword = (rule: RuleObject, value: string) =>
    validateConfirm(rule, value, formState.password as string, ['请再次填写确认密码', '两次密码不一致']);
  const rulesRef = reactive({
    username: [require('请填写用户名'), pattern('^[a-zA-Z0-9\u4e00-\u9fa5]{3,40}$', '用户名为3-12位字母,数字或汉字')],
    password: [require('请输入密码'), pattern('^[a-zA-Z0-9]{6,12}$', '请输入6到12位字母或数字')],
    confirmpsd: [{ validator: validateConfirmPassword, required: true }],
    name: [require('请填写姓名'), pattern('^[a-zA-Z\u4e00-\u9fa5]{2,40}$', '用户名为2-12位字母或汉字')],
    isEnable: [number('请选择状态')],
    roleIds: [arrayRequire('请选择角色')],
  });
  const { resetFields, validate, validateInfos } = useForm(formState, rulesRef);
  const roles: Ref<Record<string, any>[]> = ref([]);
  const id: Ref<number> = ref(0);
  const mallId: Ref<number | null> = ref(null);
  const isEdit: Ref<boolean> = ref(false);
  
  onMounted(() => {
    nextTick(() => {
      loadRole();
      loadData();
    });
  })
  const handleGoBack = () => {
    $multiTab.closeCurrentPage();
  }
  const handleSubmit = (values: AdminUser) => {
    validate().then(async () => {
      console.log('Received values of form: ', values);
      const resp = await saveWebUser({
        adminUser: Object.assign({ id: id.value, mallId: mallId.value }, values),
        password: values.password,
        roleIds: values.roleIds,
      });
      if (validResp(resp)) {
        $message.success(resp.msg);
        $multiTab.closeCurrentPage({ name: '{{properCase componentName}}' });
      }
    })
  }
  const loadRole = async () => {
    const resp = await getAllRole();
    if (resp.data != null) {
      roles.value = resp.data as Record<string, any>[];
    }
  }
  const loadData = async() => {
    const idQ = query.id || 0;
    if (idQ > 0) {
      id.value = +idQ;
      const resp = await getWebUserDetail({ id: +idQ });
      if (validResp(resp)) {
        isEdit.value = true;
        const formData = pick(resp.data.adminUser, ['username', 'password', 'name', 'phone', 'isEnable', 'roleIds', 'remark', 'mallId']);
        Object.assign(formState, formData);
      }
    } else {
      isEdit.value = false;
    }
  }
  const labelCol = {
    xs: { span: 24 },
    sm: { span: 5 },
  }
  const wrapperCol = {
    xs: { span: 24 },
    sm: { span: 12 },
  }
  const buttonCol = {
    wrapperCol: {
      xs: { span: 24 },
      sm: { span: 12, offset: 5 },
    },
  }
</script>
